meta:
  plan:
    terraform-bootstrap:
      task: terraform-bootstrap
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: dwpdigital/jinja-yaml-aws
            version: 0.0.19
            tag: 0.0.19
        run:
          path: sh
          args:
            - -exc
            - |
              python bootstrap_terraform.py
              cp terraform.tf ../terraform-config
          dir: dataworks-github-config
        inputs:
          - name: dataworks-github-config
        outputs:
          - name: terraform-config
      params:
        AWS_REGION: eu-west-2
    terraform-apply:
      task: terraform-apply
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: hashicorp/terraform
            version: ((dataworks.terraform_11_version))
            tag: ((dataworks.terraform_11_version))
        run:
          path: sh
          args:
            - -exc
            - |
              cp ../terraform-config/terraform.tf .
              terraform workspace show
              terraform init
              terraform plan -out terraform.plan
              terraform apply -auto-approve terraform.plan
          dir: dataworks-github-config
        inputs:
          - name: dataworks-github-config
          - name: terraform-config
      params:
        TF_CLI_ARGS_apply: -lock-timeout=300s
        TF_INPUT: "false"
        TF_VAR_github_token: ((dataworks-secrets.concourse_github_pat))
        TF_VAR_github_webhook_token: ((dataworks.concourse_github_webhook_token))
        TF_VAR_github_organization: dwp
        TF_VAR_dockerhub_username: ((dataworks.dockerhub_username))
        TF_VAR_dockerhub_password: ((dataworks-secrets.dockerhub_token))
        TF_VAR_snyk_token: ((dataworks-secrets.snyk_token))
    terraform-plan:
      task: terraform-plan
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: hashicorp/terraform
            version: ((dataworks.terraform_11_version))
            tag: ((dataworks.terraform_11_version))
        run:
          path: sh
          args:
            - -exc
            - |
              cp ../terraform-config/terraform.tf .
              terraform workspace show
              terraform init
              terraform plan -detailed-exitcode
          dir: dataworks-github-config
        inputs:
          - name: dataworks-github-config
          - name: terraform-config
      params:
        TF_CLI_ARGS_plan: -lock-timeout=300s
        TF_INPUT: "false"
        TF_VAR_github_token: ((dataworks-secrets.concourse_github_pat))
        TF_VAR_github_webhook_token: ((dataworks.concourse_github_webhook_token))
        TF_VAR_github_organization: dwp
        TF_VAR_dockerhub_username: ((dataworks.dockerhub_username))
        TF_VAR_dockerhub_password: ((dataworks-secrets.dockerhub_token))
        TF_VAR_snyk_token: ((dataworks-secrets.snyk_token))
    terraform-output-repositories:
      task: terraform-output-repositories
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: hashicorp/terraform
            version: ((dataworks.terraform_11_version))
            tag: ((dataworks.terraform_11_version))
        run:
          path: sh
          args:
            - -exc
            - |
              cp ../terraform-config/terraform.tf .
              terraform workspace show
              terraform init
              terraform output --json > ../terraform-output-repositories/outputs.json
          dir: dataworks-github-config
        inputs:
          - name: dataworks-github-config
          - name: terraform-config
        outputs:
          - name: terraform-output-repositories
      params:
        TF_CLI_ARGS_plan: -lock-timeout=300s
        TF_INPUT: "false"
    new-repo-pipeline:
      task: new-repo-pipeline
      config:
        inputs:
          - name: terraform-output-repositories
        outputs:
          - name: new-repo-pipeline-modified
        platform: linux
        image_resource:
          type: docker-image
          source: { repository: makocchi/alpine-git-curl-jq, tag: "latest" }
        run:
          path: /bin/sh
          args:
            - -exc
            - |
              git config --global user.name "${GIT_USERNAME}"
              git config --global user.email "${GIT_EMAIL}"
              TF_REPO_NAME=dataworks-repo-template-terraform

              REPO=`jq -r .repository ../terraform-output-repositories/outputs.json`
              for NEW_REPO_NAME in $REPO do;
                git clone $NEW_REPO_NAME $NEW_REPO_NAME-modified
                cd $NEW_REPO_NAME-modified
                git remote set-url origin https://github.com/dwp/$NEW_REPO_NAME.git

                  if [ ! -z 'grep -rnw $TF_REPO_NAME ci' ]; then
                    find ci -type f -exec sed -i 's/$TF_REPO_NAME/$NEW_REPO_NAME/g' {} +
                    find terraform -type f -exec sed -i 's/$TF_REPO_NAME/$NEW_REPO_NAME/g' {} +
                    git add ci/
                    git diff --quiet && git diff --staged --quiet || git commit -m "renamed pipeline to fit repository"
                  else
                    echo "Not required, or not a Terraform repository"
                  fi
              done

              cd ..
        params:
          GIT_USERNAME: ((dataworks.concourse_github_username))
          GIT_EMAIL: ((dataworks.concourse_github_email))
        put: new-repo-pipeline-modified
